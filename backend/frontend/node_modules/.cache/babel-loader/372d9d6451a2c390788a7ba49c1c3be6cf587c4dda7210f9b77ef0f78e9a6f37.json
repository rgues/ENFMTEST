{"ast":null,"code":"import { getRequest, getCategories, saveRequest } from '../api/request';\nimport { LIST_REQUEST, REQUEST_FAILURE } from '../store/types';\nexport const requestModule = {\n  state() {\n    return {\n      listRequest: [],\n      categories: [],\n      message: ''\n    };\n  },\n  mutations: {\n    setRequest(state, data) {\n      state.listRequest = data;\n    },\n    listCategories(state, data) {\n      state.categories = data;\n    },\n    setRequestFailure(state, data) {\n      state.message = data;\n    }\n  },\n  actions: {\n    async getRequests({\n      commit,\n      state\n    }, list = null) {\n      return new Promise(resovle => {\n        getRequest().then(response => {\n          if (list) {\n            commit(LIST_REQUEST, [...state.listRequest, ...response.data]);\n          } else {\n            commit(LIST_REQUEST, response.data);\n          }\n          commit(LIST_REQUEST, response.data);\n          setTimeout(() => {\n            resovle(state.listRequest);\n          }, 300);\n        }).catch(() => resovle([]));\n      });\n    },\n    async getCategoriesList() {\n      return getCategories().then(response => response.data).catch(() => []);\n    },\n    async sentRequest({\n      commit\n    }, data) {\n      return new Promise((resolve, reject) => {\n        saveRequest(data).then(response => {\n          setTimeout(() => {\n            resolve(response);\n          }, 300);\n        }).catch(() => {\n          commit(REQUEST_FAILURE, 'Failed to save request.');\n          setTimeout(() => {\n            reject('error');\n          }, 300);\n        });\n      });\n    }\n  },\n  getters: {}\n};","map":{"version":3,"names":["getRequest","getCategories","saveRequest","LIST_REQUEST","REQUEST_FAILURE","requestModule","state","listRequest","categories","message","mutations","setRequest","data","listCategories","setRequestFailure","actions","getRequests","commit","list","Promise","resovle","then","response","setTimeout","catch","getCategoriesList","sentRequest","resolve","reject","getters"],"sources":["C:/Users/HP/Desktop/Etisalat/client/src/store/request.module.js"],"sourcesContent":["import { getRequest, getCategories, saveRequest } from '../api/request';\r\nimport { LIST_REQUEST, REQUEST_FAILURE } from '../store/types';\r\n\r\nexport const requestModule = {\r\n    state() {\r\n        return {\r\n            listRequest: [],\r\n            categories: [],\r\n            message: ''\r\n        }\r\n    },\r\n    mutations: {\r\n        setRequest(state, data) {\r\n            state.listRequest = data\r\n        },\r\n        listCategories(state, data) {\r\n            state.categories = data\r\n        }\r\n        ,\r\n        setRequestFailure(state, data) {\r\n            state.message = data\r\n        }\r\n    },\r\n    actions: {\r\n        async getRequests({ commit, state },list = null) {\r\n         return new Promise((resovle) => {\r\n            getRequest().then(response => {\r\n                    if (list) {\r\n                        commit(LIST_REQUEST, [...state.listRequest, ...response.data])\r\n                    } else {\r\n                        commit(LIST_REQUEST, response.data)\r\n                    }\r\n\r\n                    commit(LIST_REQUEST, response.data)\r\n                    setTimeout(()=> {\r\n                          resovle(state.listRequest);\r\n                    },300)\r\n               \r\n            }).catch(() => resovle([]))\r\n\r\n        })\r\n\r\n        },\r\n\r\n        async getCategoriesList() {\r\n           return getCategories().then(response => response.data).catch(() => [])\r\n        },\r\n\r\n        async sentRequest({ commit }, data) {\r\n            return new Promise((resolve, reject) => {\r\n                saveRequest(data).then(response => {\r\n                    setTimeout(() => {\r\n                        resolve(response)\r\n                    }, 300);\r\n                }).catch(() => {\r\n\r\n                    commit(REQUEST_FAILURE, 'Failed to save request.');\r\n                    setTimeout(() => {\r\n                        reject('error')\r\n                    }, 300);\r\n\r\n                })\r\n            })\r\n\r\n        },\r\n    },\r\n\r\n    getters: {\r\n\r\n    }\r\n};"],"mappings":"AAAA,SAASA,UAAU,EAAEC,aAAa,EAAEC,WAAW,QAAQ,gBAAgB;AACvE,SAASC,YAAY,EAAEC,eAAe,QAAQ,gBAAgB;AAE9D,OAAO,MAAMC,aAAa,GAAG;EACzBC,KAAKA,CAAA,EAAG;IACJ,OAAO;MACHC,WAAW,EAAE,EAAE;MACfC,UAAU,EAAE,EAAE;MACdC,OAAO,EAAE;IACb,CAAC;EACL,CAAC;EACDC,SAAS,EAAE;IACPC,UAAUA,CAACL,KAAK,EAAEM,IAAI,EAAE;MACpBN,KAAK,CAACC,WAAW,GAAGK,IAAI;IAC5B,CAAC;IACDC,cAAcA,CAACP,KAAK,EAAEM,IAAI,EAAE;MACxBN,KAAK,CAACE,UAAU,GAAGI,IAAI;IAC3B,CAAC;IAEDE,iBAAiBA,CAACR,KAAK,EAAEM,IAAI,EAAE;MAC3BN,KAAK,CAACG,OAAO,GAAGG,IAAI;IACxB;EACJ,CAAC;EACDG,OAAO,EAAE;IACL,MAAMC,WAAWA,CAAC;MAAEC,MAAM;MAAEX;IAAM,CAAC,EAACY,IAAI,GAAG,IAAI,EAAE;MAChD,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;QAC7BpB,UAAU,CAAC,CAAC,CAACqB,IAAI,CAACC,QAAQ,IAAI;UACtB,IAAIJ,IAAI,EAAE;YACND,MAAM,CAACd,YAAY,EAAE,CAAC,GAAGG,KAAK,CAACC,WAAW,EAAE,GAAGe,QAAQ,CAACV,IAAI,CAAC,CAAC;UAClE,CAAC,MAAM;YACHK,MAAM,CAACd,YAAY,EAAEmB,QAAQ,CAACV,IAAI,CAAC;UACvC;UAEAK,MAAM,CAACd,YAAY,EAAEmB,QAAQ,CAACV,IAAI,CAAC;UACnCW,UAAU,CAAC,MAAK;YACVH,OAAO,CAACd,KAAK,CAACC,WAAW,CAAC;UAChC,CAAC,EAAC,GAAG,CAAC;QAEd,CAAC,CAAC,CAACiB,KAAK,CAAC,MAAMJ,OAAO,CAAC,EAAE,CAAC,CAAC;MAE/B,CAAC,CAAC;IAEF,CAAC;IAED,MAAMK,iBAAiBA,CAAA,EAAG;MACvB,OAAOxB,aAAa,CAAC,CAAC,CAACoB,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACV,IAAI,CAAC,CAACY,KAAK,CAAC,MAAM,EAAE,CAAC;IACzE,CAAC;IAED,MAAME,WAAWA,CAAC;MAAET;IAAO,CAAC,EAAEL,IAAI,EAAE;MAChC,OAAO,IAAIO,OAAO,CAAC,CAACQ,OAAO,EAAEC,MAAM,KAAK;QACpC1B,WAAW,CAACU,IAAI,CAAC,CAACS,IAAI,CAACC,QAAQ,IAAI;UAC/BC,UAAU,CAAC,MAAM;YACbI,OAAO,CAACL,QAAQ,CAAC;UACrB,CAAC,EAAE,GAAG,CAAC;QACX,CAAC,CAAC,CAACE,KAAK,CAAC,MAAM;UAEXP,MAAM,CAACb,eAAe,EAAE,yBAAyB,CAAC;UAClDmB,UAAU,CAAC,MAAM;YACbK,MAAM,CAAC,OAAO,CAAC;UACnB,CAAC,EAAE,GAAG,CAAC;QAEX,CAAC,CAAC;MACN,CAAC,CAAC;IAEN;EACJ,CAAC;EAEDC,OAAO,EAAE,CAET;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}