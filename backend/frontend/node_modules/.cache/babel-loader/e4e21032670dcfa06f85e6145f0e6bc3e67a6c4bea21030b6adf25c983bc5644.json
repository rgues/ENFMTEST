{"ast":null,"code":"import { getRequest, getCategories, saveRequest } from '../api/request';\nimport { LIST_REQUEST, REQUEST_FAILURE } from '../store/types';\nexport const requestModule = {\n  state() {\n    return {\n      listRequest: [],\n      categories: [],\n      message: ''\n    };\n  },\n  mutations: {\n    setRequest(state, data) {\n      state.listRequest = data;\n    },\n    listCategories(state, data) {\n      state.categories = data;\n    },\n    setRequestFailure(state, data) {\n      state.message = data;\n    }\n  },\n  actions: {\n    async getRequests({\n      commit,\n      state\n    }) {\n      getRequest().then(response => {\n        if (state.listRequest && state.listRequest.length) {\n          commit(LIST_REQUEST, [...state.request.listRequest, ...response.data]);\n        } else {\n          commit(LIST_REQUEST, [...response.data]);\n        }\n      }).catch(() => []);\n    },\n    async getCategoriesList() {\n      return getCategories().then(response => response.data).catch(() => []);\n    },\n    async sentRequest({\n      commit\n    }, data) {\n      return new Promise((resolve, reject) => {\n        saveRequest(data).then(response => {\n          setTimeout(() => {\n            resolve(response);\n          }, 300);\n        }).catch(() => {\n          commit(REQUEST_FAILURE, 'Failed to save request.');\n          setTimeout(() => {\n            reject('error');\n          }, 300);\n        });\n      });\n    }\n  },\n  getters: {}\n};","map":{"version":3,"names":["getRequest","getCategories","saveRequest","LIST_REQUEST","REQUEST_FAILURE","requestModule","state","listRequest","categories","message","mutations","setRequest","data","listCategories","setRequestFailure","actions","getRequests","commit","then","response","length","request","catch","getCategoriesList","sentRequest","Promise","resolve","reject","setTimeout","getters"],"sources":["C:/Users/HP/Desktop/Etisalat/client/src/store/request.module.js"],"sourcesContent":["import { getRequest, getCategories, saveRequest } from '../api/request';\r\nimport { LIST_REQUEST, REQUEST_FAILURE } from '../store/types';\r\n\r\nexport const requestModule = {\r\n    state() {\r\n        return {\r\n            listRequest: [],\r\n            categories: [],\r\n            message: ''\r\n        }\r\n    },\r\n    mutations: {\r\n        setRequest(state, data) {\r\n            state.listRequest = data\r\n        },\r\n        listCategories(state, data) {\r\n            state.categories = data\r\n        }\r\n        ,\r\n        setRequestFailure(state, data) {\r\n            state.message = data\r\n        }\r\n    },\r\n    actions: {\r\n        async getRequests({ commit, state }) {\r\n\r\n            getRequest().then(response => {\r\n                if (state.listRequest && state.listRequest.length) {\r\n                    commit(LIST_REQUEST, [...state.request.listRequest, ...response.data])\r\n                } else {\r\n                    commit(LIST_REQUEST, [...response.data])\r\n                }\r\n            }).catch(() => [])\r\n\r\n        },\r\n\r\n        async getCategoriesList() {\r\n           return getCategories().then(response => response.data).catch(() => [])\r\n        },\r\n\r\n        async sentRequest({ commit }, data) {\r\n            return new Promise((resolve, reject) => {\r\n                saveRequest(data).then(response => {\r\n                    setTimeout(() => {\r\n                        resolve(response)\r\n                    }, 300);\r\n                }).catch(() => {\r\n\r\n                    commit(REQUEST_FAILURE, 'Failed to save request.');\r\n                    setTimeout(() => {\r\n                        reject('error')\r\n                    }, 300);\r\n\r\n                })\r\n            })\r\n\r\n        },\r\n    },\r\n\r\n    getters: {\r\n\r\n    }\r\n};"],"mappings":"AAAA,SAASA,UAAU,EAAEC,aAAa,EAAEC,WAAW,QAAQ,gBAAgB;AACvE,SAASC,YAAY,EAAEC,eAAe,QAAQ,gBAAgB;AAE9D,OAAO,MAAMC,aAAa,GAAG;EACzBC,KAAKA,CAAA,EAAG;IACJ,OAAO;MACHC,WAAW,EAAE,EAAE;MACfC,UAAU,EAAE,EAAE;MACdC,OAAO,EAAE;IACb,CAAC;EACL,CAAC;EACDC,SAAS,EAAE;IACPC,UAAUA,CAACL,KAAK,EAAEM,IAAI,EAAE;MACpBN,KAAK,CAACC,WAAW,GAAGK,IAAI;IAC5B,CAAC;IACDC,cAAcA,CAACP,KAAK,EAAEM,IAAI,EAAE;MACxBN,KAAK,CAACE,UAAU,GAAGI,IAAI;IAC3B,CAAC;IAEDE,iBAAiBA,CAACR,KAAK,EAAEM,IAAI,EAAE;MAC3BN,KAAK,CAACG,OAAO,GAAGG,IAAI;IACxB;EACJ,CAAC;EACDG,OAAO,EAAE;IACL,MAAMC,WAAWA,CAAC;MAAEC,MAAM;MAAEX;IAAM,CAAC,EAAE;MAEjCN,UAAU,CAAC,CAAC,CAACkB,IAAI,CAACC,QAAQ,IAAI;QAC1B,IAAIb,KAAK,CAACC,WAAW,IAAID,KAAK,CAACC,WAAW,CAACa,MAAM,EAAE;UAC/CH,MAAM,CAACd,YAAY,EAAE,CAAC,GAAGG,KAAK,CAACe,OAAO,CAACd,WAAW,EAAE,GAAGY,QAAQ,CAACP,IAAI,CAAC,CAAC;QAC1E,CAAC,MAAM;UACHK,MAAM,CAACd,YAAY,EAAE,CAAC,GAAGgB,QAAQ,CAACP,IAAI,CAAC,CAAC;QAC5C;MACJ,CAAC,CAAC,CAACU,KAAK,CAAC,MAAM,EAAE,CAAC;IAEtB,CAAC;IAED,MAAMC,iBAAiBA,CAAA,EAAG;MACvB,OAAOtB,aAAa,CAAC,CAAC,CAACiB,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACP,IAAI,CAAC,CAACU,KAAK,CAAC,MAAM,EAAE,CAAC;IACzE,CAAC;IAED,MAAME,WAAWA,CAAC;MAAEP;IAAO,CAAC,EAAEL,IAAI,EAAE;MAChC,OAAO,IAAIa,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACpCzB,WAAW,CAACU,IAAI,CAAC,CAACM,IAAI,CAACC,QAAQ,IAAI;UAC/BS,UAAU,CAAC,MAAM;YACbF,OAAO,CAACP,QAAQ,CAAC;UACrB,CAAC,EAAE,GAAG,CAAC;QACX,CAAC,CAAC,CAACG,KAAK,CAAC,MAAM;UAEXL,MAAM,CAACb,eAAe,EAAE,yBAAyB,CAAC;UAClDwB,UAAU,CAAC,MAAM;YACbD,MAAM,CAAC,OAAO,CAAC;UACnB,CAAC,EAAE,GAAG,CAAC;QAEX,CAAC,CAAC;MACN,CAAC,CAAC;IAEN;EACJ,CAAC;EAEDE,OAAO,EAAE,CAET;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}