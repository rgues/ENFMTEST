{"ast":null,"code":"import { TOKEN_USER, ISAUTHENTICATE, LOGIN_DATA, LOGIN_FAILURE } from './types';\nimport { login, logout, getUsers } from '../api/user';\nexport const userModule = {\n  state() {\n    return {\n      isAuthenticated: false,\n      token: '',\n      loginData: {},\n      message: ''\n    };\n  },\n  mutations: {\n    authenticate(state, data) {\n      state.isAuthenticated = data;\n    },\n    updateLoginInput(state, inputName, value) {\n      switch (inputName) {\n        case 'email':\n          state.loginData.email = value;\n          break;\n        case 'password':\n          state.loginData.password = value;\n          break;\n        default:\n          break;\n      }\n    },\n    setToken(state, data) {\n      state.token = data;\n    },\n    setLoginData(state, data) {\n      state.loginData = data;\n    },\n    loginFailure(state, data) {\n      state.message = data;\n    }\n  },\n  actions: {\n    async loginUser({\n      commit\n    }, data) {\n      return new Promise((resolve, reject) => {\n        login(data).then(response => {\n          commit(TOKEN_USER, response.data.token);\n          commit(ISAUTHENTICATE, true);\n          commit(LOGIN_DATA, response.data);\n          setTimeout(() => {\n            resolve('success');\n          }, 300);\n        }).catch(err => {\n          if (err.status === 401) {\n            commit(LOGIN_FAILURE, 'Credentials is incorrect.');\n          } else {\n            commit(LOGIN_FAILURE, 'Failed to login user.');\n          }\n          setTimeout(() => {\n            reject('error');\n          }, 300);\n        });\n      });\n    },\n    async logoutUser({\n      commit\n    }) {\n      return new Promise((resolve, reject) => {\n        logout().then(() => {\n          setTimeout(() => {\n            commit(TOKEN_USER, '');\n            commit(ISAUTHENTICATE, false);\n            commit(LOGIN_DATA, {});\n            resolve('success');\n          }, 500);\n        }).catch(() => {\n          reject('error');\n        });\n      });\n    },\n    async getUsersList() {\n      return getUsers().then(response => response.data).catch(() => []);\n    }\n  },\n  getters: {}\n};","map":{"version":3,"names":["TOKEN_USER","ISAUTHENTICATE","LOGIN_DATA","LOGIN_FAILURE","login","logout","getUsers","userModule","state","isAuthenticated","token","loginData","message","mutations","authenticate","data","updateLoginInput","inputName","value","email","password","setToken","setLoginData","loginFailure","actions","loginUser","commit","Promise","resolve","reject","then","response","setTimeout","catch","err","status","logoutUser","getUsersList","getters"],"sources":["C:/Users/HP/Desktop/Etisalat/client/src/store/user.module.js"],"sourcesContent":["import {TOKEN_USER, ISAUTHENTICATE, LOGIN_DATA,LOGIN_FAILURE} from './types';\r\nimport { login, logout, getUsers } from '../api/user';\r\n\r\nexport const userModule = {\r\n    state () {\r\n        return {\r\n            isAuthenticated: false,\r\n            token: '',\r\n            loginData:{ },\r\n            message:''\r\n        }\r\n        \r\n    },\r\n    mutations: {\r\n        authenticate(state, data) {\r\n            state.isAuthenticated = data;\r\n        },\r\n        updateLoginInput (state,inputName, value) {\r\n            switch (inputName) {\r\n                case 'email' :\r\n                    state.loginData.email = value\r\n                    break;\r\n                case 'password':\r\n                    state.loginData.password = value\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            \r\n        },\r\n\r\n        setToken(state, data) {\r\n            state.token = data\r\n        },\r\n\r\n        setLoginData(state, data) {\r\n            state.loginData = data\r\n        },\r\n        loginFailure(state, data) {\r\n            state.message = data\r\n        }\r\n\r\n    },\r\n    actions: {\r\n       async loginUser ({ commit  }, data) {\r\n            return new Promise((resolve, reject) => {\r\n                login(data).then(response => {\r\n                    commit(TOKEN_USER, response.data.token)\r\n                    commit(ISAUTHENTICATE, true)\r\n                    commit(LOGIN_DATA, response.data)\r\n                    setTimeout(() => {\r\n                        resolve('success')\r\n                    },300);\r\n                }).catch(err => {\r\n                  \r\n                    if (err.status === 401) {\r\n                        commit(LOGIN_FAILURE, 'Credentials is incorrect.')\r\n                    } else {\r\n                        commit(LOGIN_FAILURE, 'Failed to login user.')\r\n                    }\r\n                    setTimeout(() => {\r\n                        reject('error')\r\n                    },300);\r\n\r\n                })\r\n            })\r\n      \r\n        },\r\n        async logoutUser ({commit}) {\r\n\r\n            return new Promise((resolve, reject) => {\r\n                logout().then(() => {\r\n                    \r\n                    setTimeout(()=> {\r\n                        commit(TOKEN_USER, '')\r\n                        commit(ISAUTHENTICATE, false)\r\n                        commit(LOGIN_DATA, {})\r\n                        resolve('success')\r\n                    },500);\r\n\r\n                }).catch(() => {\r\n                    reject('error')\r\n                })\r\n            })\r\n        },\r\n\r\n        async getUsersList() {\r\n            return getUsers().then(response => response.data).catch(() => [])\r\n        },\r\n\r\n    },\r\n\r\n    getters : {\r\n     \r\n    }\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}