{"ast":null,"code":"import { getRequest, getCategories } from '../api/request';\nimport { LIST_REQUEST } from '../store/types';\nexport const requestModule = {\n  state() {\n    return {\n      listRequest: [],\n      categories: []\n    };\n  },\n  mutations: {\n    setRequest(state, data) {\n      state.listRequest = data;\n    },\n    listCategories(state, data) {\n      state.categories = data;\n    }\n  },\n  actions: {\n    async getRequests({\n      commit,\n      state\n    }) {\n      getRequest().then(response => {\n        if (state.request.listRequest) {\n          commit(LIST_REQUEST, [...state.request.listRequest, ...response.data]);\n        } else {\n          commit(LIST_REQUEST, [...response.data]);\n        }\n      }).catch(() => []);\n    },\n    async getCategories() {\n      getCategories().then(response => {\n        commit(LIST_CATEGORIES, response.data.data);\n      }).catch(() => []);\n    },\n    async sentRequest({\n      commit\n    }, data) {\n      return new Promise((resolve, reject) => {\n        login(data).then(response => {\n          commit(TOKEN_USER, response.data.token);\n          commit(ISAUTHENTICATE, true);\n          commit(LOGIN_DATA, response.data);\n          setTimeout(() => {\n            resolve('success');\n          }, 300);\n        }).catch(err => {\n          if (err.status === 401) {\n            commit(LOGIN_FAILURE, 'Credentials is incorrect.');\n          } else {\n            commit(LOGIN_FAILURE, 'Failed to login user.');\n          }\n          setTimeout(() => {\n            reject('error');\n          }, 300);\n        });\n      });\n    }\n  },\n  getters: {}\n};","map":{"version":3,"names":["getRequest","getCategories","LIST_REQUEST","requestModule","state","listRequest","categories","mutations","setRequest","data","listCategories","actions","getRequests","commit","then","response","request","catch","LIST_CATEGORIES","sentRequest","Promise","resolve","reject","login","TOKEN_USER","token","ISAUTHENTICATE","LOGIN_DATA","setTimeout","err","status","LOGIN_FAILURE","getters"],"sources":["C:/Users/HP/Desktop/Etisalat/client/src/store/request.module.js"],"sourcesContent":["import { getRequest, getCategories } from '../api/request';\r\nimport { LIST_REQUEST } from '../store/types';\r\n\r\nexport const requestModule = {\r\n    state () {\r\n        return { \r\n            listRequest:[],\r\n            categories:[]\r\n        }\r\n    },\r\n    mutations: {\r\n        setRequest(state, data){\r\n           state.listRequest = data \r\n        },\r\n        listCategories(state, data) {\r\n            state.categories = data\r\n        }\r\n    },\r\n    actions: {\r\n      async getRequests({commit,state}) {\r\n\r\n          getRequest().then(response => {\r\n                if (state.request.listRequest) { \r\n                    commit(LIST_REQUEST,[...state.request.listRequest,...response.data])\r\n                } else {\r\n                    commit(LIST_REQUEST,[...response.data])\r\n                }\r\n            }).catch(() => [])\r\n\r\n        },\r\n\r\n        async getCategories() {\r\n            getCategories().then(response => {\r\n                commit(LIST_CATEGORIES,response.data.data)\r\n            }).catch(() => [])\r\n        },\r\n\r\n        async sentRequest ({ commit  }, data) {\r\n            return new Promise((resolve, reject) => {\r\n                login(data).then(response => {\r\n                    commit(TOKEN_USER, response.data.token)\r\n                    commit(ISAUTHENTICATE, true)\r\n                    commit(LOGIN_DATA, response.data)\r\n                    setTimeout(() => {\r\n                        resolve('success')\r\n                    },300);\r\n                }).catch(err => {\r\n                  \r\n                    if (err.status === 401) {\r\n                        commit(LOGIN_FAILURE, 'Credentials is incorrect.')\r\n                    } else {\r\n                        commit(LOGIN_FAILURE, 'Failed to login user.')\r\n                    }\r\n                    setTimeout(() => {\r\n                        reject('error')\r\n                    },300);\r\n\r\n                })\r\n            })\r\n      \r\n        },\r\n    },\r\n\r\n    getters : {\r\n\r\n    }\r\n};"],"mappings":"AAAA,SAASA,UAAU,EAAEC,aAAa,QAAQ,gBAAgB;AAC1D,SAASC,YAAY,QAAQ,gBAAgB;AAE7C,OAAO,MAAMC,aAAa,GAAG;EACzBC,KAAKA,CAAA,EAAI;IACL,OAAO;MACHC,WAAW,EAAC,EAAE;MACdC,UAAU,EAAC;IACf,CAAC;EACL,CAAC;EACDC,SAAS,EAAE;IACPC,UAAUA,CAACJ,KAAK,EAAEK,IAAI,EAAC;MACpBL,KAAK,CAACC,WAAW,GAAGI,IAAI;IAC3B,CAAC;IACDC,cAAcA,CAACN,KAAK,EAAEK,IAAI,EAAE;MACxBL,KAAK,CAACE,UAAU,GAAGG,IAAI;IAC3B;EACJ,CAAC;EACDE,OAAO,EAAE;IACP,MAAMC,WAAWA,CAAC;MAACC,MAAM;MAACT;IAAK,CAAC,EAAE;MAE9BJ,UAAU,CAAC,CAAC,CAACc,IAAI,CAACC,QAAQ,IAAI;QACxB,IAAIX,KAAK,CAACY,OAAO,CAACX,WAAW,EAAE;UAC3BQ,MAAM,CAACX,YAAY,EAAC,CAAC,GAAGE,KAAK,CAACY,OAAO,CAACX,WAAW,EAAC,GAAGU,QAAQ,CAACN,IAAI,CAAC,CAAC;QACxE,CAAC,MAAM;UACHI,MAAM,CAACX,YAAY,EAAC,CAAC,GAAGa,QAAQ,CAACN,IAAI,CAAC,CAAC;QAC3C;MACJ,CAAC,CAAC,CAACQ,KAAK,CAAC,MAAM,EAAE,CAAC;IAEtB,CAAC;IAED,MAAMhB,aAAaA,CAAA,EAAG;MAClBA,aAAa,CAAC,CAAC,CAACa,IAAI,CAACC,QAAQ,IAAI;QAC7BF,MAAM,CAACK,eAAe,EAACH,QAAQ,CAACN,IAAI,CAACA,IAAI,CAAC;MAC9C,CAAC,CAAC,CAACQ,KAAK,CAAC,MAAM,EAAE,CAAC;IACtB,CAAC;IAED,MAAME,WAAWA,CAAE;MAAEN;IAAQ,CAAC,EAAEJ,IAAI,EAAE;MAClC,OAAO,IAAIW,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACpCC,KAAK,CAACd,IAAI,CAAC,CAACK,IAAI,CAACC,QAAQ,IAAI;UACzBF,MAAM,CAACW,UAAU,EAAET,QAAQ,CAACN,IAAI,CAACgB,KAAK,CAAC;UACvCZ,MAAM,CAACa,cAAc,EAAE,IAAI,CAAC;UAC5Bb,MAAM,CAACc,UAAU,EAAEZ,QAAQ,CAACN,IAAI,CAAC;UACjCmB,UAAU,CAAC,MAAM;YACbP,OAAO,CAAC,SAAS,CAAC;UACtB,CAAC,EAAC,GAAG,CAAC;QACV,CAAC,CAAC,CAACJ,KAAK,CAACY,GAAG,IAAI;UAEZ,IAAIA,GAAG,CAACC,MAAM,KAAK,GAAG,EAAE;YACpBjB,MAAM,CAACkB,aAAa,EAAE,2BAA2B,CAAC;UACtD,CAAC,MAAM;YACHlB,MAAM,CAACkB,aAAa,EAAE,uBAAuB,CAAC;UAClD;UACAH,UAAU,CAAC,MAAM;YACbN,MAAM,CAAC,OAAO,CAAC;UACnB,CAAC,EAAC,GAAG,CAAC;QAEV,CAAC,CAAC;MACN,CAAC,CAAC;IAEN;EACJ,CAAC;EAEDU,OAAO,EAAG,CAEV;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}